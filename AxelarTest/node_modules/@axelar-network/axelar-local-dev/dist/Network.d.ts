/// <reference types="node" />
import { ethers, Wallet, Contract, providers } from 'ethers';
import { AxelarGateway } from './types/@axelar-network/axelar-cgp-solidity/contracts/AxelarGateway';
import { AxelarGasService } from './types/@axelar-network/axelar-cgp-solidity/contracts/gas-service/AxelarGasService';
import http from 'http';
export declare const networks: Network[];
export interface NetworkOptions {
    ganacheOptions?: any;
    dbPath?: string;
    port?: number;
    name?: string;
    chainId?: number;
    seed?: string;
}
export interface NetworkInfo {
    name: string;
    chainId: number;
    userKeys: string[];
    ownerKey: string;
    operatorKey: string;
    relayerKey: string;
    adminKeys: string[];
    threshold: number;
    lastRelayedBlock: number;
    lastExpressedBlock: number;
    gatewayAddress: string;
    gasReceiverAddress: string;
    constAddressDeployerAddress: string;
    create3DeployerAddress: string;
    tokens: {
        [key: string]: string;
    };
}
export interface NetworkSetup {
    name?: string;
    chainId?: number;
    userKeys?: Wallet[];
    ownerKey: Wallet;
    operatorKey?: Wallet;
    relayerKey?: Wallet;
    adminKeys?: Wallet[];
    threshold?: number;
    lastRelayedBlock?: number;
    lastExpressedBlock?: number;
}
export declare class Network {
    name: string;
    chainId: number;
    provider: providers.Provider;
    userWallets: Wallet[];
    ownerWallet: Wallet;
    operatorWallet: Wallet;
    relayerWallet: Wallet;
    adminWallets: Wallet[];
    threshold: number;
    lastRelayedBlock: number;
    lastExpressedBlock: number;
    gateway: AxelarGateway;
    gasService: AxelarGasService;
    constAddressDeployer: Contract;
    create3Deployer: Contract;
    isRemote: boolean | undefined;
    url: string | undefined;
    ganacheProvider: any;
    server: http.Server | undefined;
    port: number | undefined;
    tokens: {
        [key: string]: string;
    };
    constructor(networkish?: any);
    deployGateway(): Promise<Contract>;
    _upgradeGateway(oldAdminAddresses?: string[] | undefined, oldThreshold?: number): Promise<Contract>;
    deployGasReceiver(): Promise<Contract>;
    deployConstAddressDeployer(): Promise<Contract>;
    deployCreate3Deployer(): Promise<Contract>;
    deployToken(name: string, symbol: string, decimals: number, cap: bigint, address?: string, alias?: string): Promise<ethers.Contract>;
    getTokenContract(alias: string): Promise<ethers.Contract>;
    giveToken(address: string, alias: string, amount: bigint): Promise<void>;
    getInfo(): NetworkInfo;
    getCloneInfo(): {
        name: string;
        chainId: number;
        gateway: string;
        gasService: string;
        constAddressDeployer: string;
        create3Deployer: string;
        tokens: {
            [key: string]: string;
        };
    };
}
export declare class RemoteNetwork extends Network {
    relay(): Promise<void>;
}
//# sourceMappingURL=Network.d.ts.map