import { Command } from './Command';
import { CallContractArgs, CallContractWithTokenArgs, RelayCommand, RelayData } from './types';
export type RelayerType = 'near' | 'aptos' | 'evm';
export type RelayerMap = Partial<Record<RelayerType, Relayer>> & {
    [key: string]: Relayer | undefined;
};
export declare abstract class Relayer {
    otherRelayers: RelayerMap;
    relayData: RelayData;
    protected commands: RelayCommand;
    contractCallGasEvents: any[];
    contractCallWithTokenGasEvents: any[];
    expressContractCallGasEvents: any[];
    expressContractCallWithTokenGasEvents: any[];
    abstract updateEvents(): Promise<void>;
    abstract execute(commands: RelayCommand): Promise<void>;
    abstract createCallContractCommand(commandId: string, relayData: RelayData, contractCallArgs: CallContractArgs): Command;
    abstract createCallContractWithTokenCommand(commandId: string, relayData: RelayData, callContractWithTokenArgs: CallContractWithTokenArgs): Command;
    abstract setRelayer(type: RelayerType, relayer: Relayer): void;
    relay(): Promise<void>;
    subscribeExpressCall(): Promise<void>;
    unsubscribe(): void;
}
//# sourceMappingURL=Relayer.d.ts.map