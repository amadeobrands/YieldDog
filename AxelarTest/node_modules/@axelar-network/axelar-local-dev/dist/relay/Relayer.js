"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Relayer = void 0;
const Network_1 = require("../Network");
class Relayer {
    constructor() {
        this.otherRelayers = {};
        this.relayData = {
            depositAddress: {},
            sendToken: {},
            callContract: {},
            callContractWithToken: {},
        };
        this.commands = {};
        this.contractCallGasEvents = [];
        this.contractCallWithTokenGasEvents = [];
        this.expressContractCallGasEvents = [];
        this.expressContractCallWithTokenGasEvents = [];
    }
    relay() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const to of Network_1.networks) {
                this.commands[to.name] = [];
            }
            this.commands['aptos'] = [];
            this.commands['near'] = [];
            // Update all events at the source chains
            yield this.updateEvents();
            yield this.execute(this.commands);
        });
    }
    subscribeExpressCall() {
        return __awaiter(this, void 0, void 0, function* () {
            // this is a no-op by default
        });
    }
    unsubscribe() {
        // this is a no-op by default
    }
}
exports.Relayer = Relayer;
//# sourceMappingURL=Relayer.js.map