import { Relayer, RelayerType } from './Relayer';
import { CallContractArgs, CallContractWithTokenArgs, RelayCommand, RelayData } from './types';
import { ethers } from 'ethers';
import { Command } from './Command';
interface EvmRelayerOptions {
    nearRelayer?: Relayer;
    aptosRelayer?: Relayer;
}
export declare class EvmRelayer extends Relayer {
    eventSubscribers: ethers.Contract[];
    constructor(options?: EvmRelayerOptions);
    setRelayer(type: RelayerType, relayer: Relayer): void;
    updateEvents(): Promise<void>;
    execute(commands: RelayCommand): Promise<void>;
    subscribeExpressCall(): Promise<void>;
    unsubscribe(): void;
    private executeEvm;
    private executeEvmGateway;
    private executeEvmExpress;
    private executeEvmExecutable;
    private isExecuted;
    private findMatchedGasEvent;
    private updateGasEvents;
    private updateExpressGasEvents;
    private updateCallContractEvents;
    createCallContractCommand(commandId: string, relayData: RelayData, contractCallArgs: CallContractArgs): Command;
    createCallContractWithTokenCommand(commandId: string, relayData: RelayData, callContractWithTokenArgs: CallContractWithTokenArgs): Command;
    private updateTokenSentEvent;
    private updateCallContractWithTokensEvents;
    private updateDepositAddresses;
    private getAliasFromSymbol;
}
export {};
//# sourceMappingURL=EvmRelayer.d.ts.map