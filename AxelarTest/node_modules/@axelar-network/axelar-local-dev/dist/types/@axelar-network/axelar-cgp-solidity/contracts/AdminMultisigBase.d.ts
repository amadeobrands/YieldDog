import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../common";
export interface AdminMultisigBaseInterface extends utils.Interface {
    functions: {
        "getAddress(bytes32)": FunctionFragment;
        "getBool(bytes32)": FunctionFragment;
        "getBytes(bytes32)": FunctionFragment;
        "getInt(bytes32)": FunctionFragment;
        "getString(bytes32)": FunctionFragment;
        "getUint(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getAddress" | "getBool" | "getBytes" | "getInt" | "getString" | "getUint"): FunctionFragment;
    encodeFunctionData(functionFragment: "getAddress", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getBool", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getBytes", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getInt", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getString", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getUint", values: [PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBytes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getString", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUint", data: BytesLike): Result;
    events: {};
}
export interface AdminMultisigBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AdminMultisigBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getAddress(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getBool(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        getBytes(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getInt(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getString(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        getUint(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    getAddress(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getBool(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    getBytes(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getInt(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getString(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getUint(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        getAddress(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getBool(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        getBytes(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getInt(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getString(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getUint(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getAddress(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getBool(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getBytes(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getInt(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getString(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getUint(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getAddress(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBool(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getBytes(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getInt(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getString(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUint(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=AdminMultisigBase.d.ts.map