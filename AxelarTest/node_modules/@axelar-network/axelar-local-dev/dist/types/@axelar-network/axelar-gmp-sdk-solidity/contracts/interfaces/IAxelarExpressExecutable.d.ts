import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../../common";
export interface IAxelarExpressExecutableInterface extends utils.Interface {
    functions: {
        "execute(bytes32,string,string,bytes)": FunctionFragment;
        "executeWithToken(bytes32,string,string,bytes,string,uint256)": FunctionFragment;
        "expressExecute(bytes32,string,string,bytes)": FunctionFragment;
        "expressExecuteWithToken(bytes32,string,string,bytes,string,uint256)": FunctionFragment;
        "gateway()": FunctionFragment;
        "getExpressExecutor(bytes32,string,string,bytes32)": FunctionFragment;
        "getExpressExecutorWithToken(bytes32,string,string,bytes32,string,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "execute" | "executeWithToken" | "expressExecute" | "expressExecuteWithToken" | "gateway" | "getExpressExecutor" | "getExpressExecutorWithToken"): FunctionFragment;
    encodeFunctionData(functionFragment: "execute", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "executeWithToken", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "expressExecute", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "expressExecuteWithToken", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
    encodeFunctionData(functionFragment: "getExpressExecutor", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getExpressExecutorWithToken", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeWithToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "expressExecute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "expressExecuteWithToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpressExecutor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExpressExecutorWithToken", data: BytesLike): Result;
    events: {
        "ExpressExecuted(bytes32,string,string,bytes32,address)": EventFragment;
        "ExpressExecutedWithToken(bytes32,string,string,bytes32,string,uint256,address)": EventFragment;
        "ExpressExecutionFulfilled(bytes32,string,string,bytes32,address)": EventFragment;
        "ExpressExecutionWithTokenFulfilled(bytes32,string,string,bytes32,string,uint256,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExpressExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpressExecutedWithToken"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpressExecutionFulfilled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExpressExecutionWithTokenFulfilled"): EventFragment;
}
export interface ExpressExecutedEventObject {
    commandId: string;
    sourceChain: string;
    sourceAddress: string;
    payloadHash: string;
    expressExecutor: string;
}
export type ExpressExecutedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], ExpressExecutedEventObject>;
export type ExpressExecutedEventFilter = TypedEventFilter<ExpressExecutedEvent>;
export interface ExpressExecutedWithTokenEventObject {
    commandId: string;
    sourceChain: string;
    sourceAddress: string;
    payloadHash: string;
    symbol: string;
    amount: BigNumber;
    expressExecutor: string;
}
export type ExpressExecutedWithTokenEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string
], ExpressExecutedWithTokenEventObject>;
export type ExpressExecutedWithTokenEventFilter = TypedEventFilter<ExpressExecutedWithTokenEvent>;
export interface ExpressExecutionFulfilledEventObject {
    commandId: string;
    sourceChain: string;
    sourceAddress: string;
    payloadHash: string;
    expressExecutor: string;
}
export type ExpressExecutionFulfilledEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], ExpressExecutionFulfilledEventObject>;
export type ExpressExecutionFulfilledEventFilter = TypedEventFilter<ExpressExecutionFulfilledEvent>;
export interface ExpressExecutionWithTokenFulfilledEventObject {
    commandId: string;
    sourceChain: string;
    sourceAddress: string;
    payloadHash: string;
    symbol: string;
    amount: BigNumber;
    expressExecutor: string;
}
export type ExpressExecutionWithTokenFulfilledEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string
], ExpressExecutionWithTokenFulfilledEventObject>;
export type ExpressExecutionWithTokenFulfilledEventFilter = TypedEventFilter<ExpressExecutionWithTokenFulfilledEvent>;
export interface IAxelarExpressExecutable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAxelarExpressExecutableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        expressExecute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        expressExecuteWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        gateway(overrides?: CallOverrides): Promise<[string]>;
        getExpressExecutor(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string] & {
            expressExecutor: string;
        }>;
        getExpressExecutorWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            expressExecutor: string;
        }>;
    };
    execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    expressExecute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    expressExecuteWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    gateway(overrides?: CallOverrides): Promise<string>;
    getExpressExecutor(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    getExpressExecutorWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        expressExecute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        expressExecuteWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        gateway(overrides?: CallOverrides): Promise<string>;
        getExpressExecutor(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        getExpressExecutorWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ExpressExecuted(bytes32,string,string,bytes32,address)"(commandId?: PromiseOrValue<BytesLike> | null, sourceChain?: null, sourceAddress?: null, payloadHash?: null, expressExecutor?: PromiseOrValue<string> | null): ExpressExecutedEventFilter;
        ExpressExecuted(commandId?: PromiseOrValue<BytesLike> | null, sourceChain?: null, sourceAddress?: null, payloadHash?: null, expressExecutor?: PromiseOrValue<string> | null): ExpressExecutedEventFilter;
        "ExpressExecutedWithToken(bytes32,string,string,bytes32,string,uint256,address)"(commandId?: PromiseOrValue<BytesLike> | null, sourceChain?: null, sourceAddress?: null, payloadHash?: null, symbol?: null, amount?: PromiseOrValue<BigNumberish> | null, expressExecutor?: PromiseOrValue<string> | null): ExpressExecutedWithTokenEventFilter;
        ExpressExecutedWithToken(commandId?: PromiseOrValue<BytesLike> | null, sourceChain?: null, sourceAddress?: null, payloadHash?: null, symbol?: null, amount?: PromiseOrValue<BigNumberish> | null, expressExecutor?: PromiseOrValue<string> | null): ExpressExecutedWithTokenEventFilter;
        "ExpressExecutionFulfilled(bytes32,string,string,bytes32,address)"(commandId?: PromiseOrValue<BytesLike> | null, sourceChain?: null, sourceAddress?: null, payloadHash?: null, expressExecutor?: PromiseOrValue<string> | null): ExpressExecutionFulfilledEventFilter;
        ExpressExecutionFulfilled(commandId?: PromiseOrValue<BytesLike> | null, sourceChain?: null, sourceAddress?: null, payloadHash?: null, expressExecutor?: PromiseOrValue<string> | null): ExpressExecutionFulfilledEventFilter;
        "ExpressExecutionWithTokenFulfilled(bytes32,string,string,bytes32,string,uint256,address)"(commandId?: PromiseOrValue<BytesLike> | null, sourceChain?: null, sourceAddress?: null, payloadHash?: null, symbol?: null, amount?: PromiseOrValue<BigNumberish> | null, expressExecutor?: PromiseOrValue<string> | null): ExpressExecutionWithTokenFulfilledEventFilter;
        ExpressExecutionWithTokenFulfilled(commandId?: PromiseOrValue<BytesLike> | null, sourceChain?: null, sourceAddress?: null, payloadHash?: null, symbol?: null, amount?: PromiseOrValue<BigNumberish> | null, expressExecutor?: PromiseOrValue<string> | null): ExpressExecutionWithTokenFulfilledEventFilter;
    };
    estimateGas: {
        execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        expressExecute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        expressExecuteWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        gateway(overrides?: CallOverrides): Promise<BigNumber>;
        getExpressExecutor(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getExpressExecutorWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        execute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        executeWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, tokenSymbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        expressExecute(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        expressExecuteWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payload: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpressExecutor(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExpressExecutorWithToken(commandId: PromiseOrValue<BytesLike>, sourceChain: PromiseOrValue<string>, sourceAddress: PromiseOrValue<string>, payloadHash: PromiseOrValue<BytesLike>, symbol: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IAxelarExpressExecutable.d.ts.map