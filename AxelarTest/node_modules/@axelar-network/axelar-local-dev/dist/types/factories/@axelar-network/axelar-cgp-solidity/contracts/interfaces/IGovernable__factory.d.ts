import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IGovernable, IGovernableInterface } from "../../../../../@axelar-network/axelar-cgp-solidity/contracts/interfaces/IGovernable";
export declare class IGovernable__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidGovernance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidMintLimiter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotGovernance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotMintLimiter";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousGovernance";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newGovernance";
            readonly type: "address";
        }];
        readonly name: "GovernanceTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousGovernance";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newGovernance";
            readonly type: "address";
        }];
        readonly name: "MintLimiterTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "governance";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "mintLimiter";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newGovernance";
            readonly type: "address";
        }];
        readonly name: "transferGovernance";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newGovernance";
            readonly type: "address";
        }];
        readonly name: "transferMintLimiter";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IGovernableInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IGovernable;
}
//# sourceMappingURL=IGovernable__factory.d.ts.map