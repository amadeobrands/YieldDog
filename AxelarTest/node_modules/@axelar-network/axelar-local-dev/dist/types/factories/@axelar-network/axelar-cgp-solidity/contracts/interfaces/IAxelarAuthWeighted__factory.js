"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IAxelarAuthWeighted__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "DuplicateOperators",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidOperators",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidOwner",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidThreshold",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidWeights",
        type: "error",
    },
    {
        inputs: [],
        name: "LowSignaturesWeight",
        type: "error",
    },
    {
        inputs: [],
        name: "MalformedSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "NotOwner",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address[]",
                name: "newOperators",
                type: "address[]",
            },
            {
                indexed: false,
                internalType: "uint256[]",
                name: "newWeights",
                type: "uint256[]",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "newThreshold",
                type: "uint256",
            },
        ],
        name: "OperatorshipTransferred",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        inputs: [],
        name: "currentEpoch",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
            },
        ],
        name: "epochForHash",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "epoch",
                type: "uint256",
            },
        ],
        name: "hashForEpoch",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "params",
                type: "bytes",
            },
        ],
        name: "transferOperatorship",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "messageHash",
                type: "bytes32",
            },
            {
                internalType: "bytes",
                name: "proof",
                type: "bytes",
            },
        ],
        name: "validateProof",
        outputs: [
            {
                internalType: "bool",
                name: "currentOperators",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class IAxelarAuthWeighted__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IAxelarAuthWeighted__factory = IAxelarAuthWeighted__factory;
IAxelarAuthWeighted__factory.abi = _abi;
//# sourceMappingURL=IAxelarAuthWeighted__factory.js.map