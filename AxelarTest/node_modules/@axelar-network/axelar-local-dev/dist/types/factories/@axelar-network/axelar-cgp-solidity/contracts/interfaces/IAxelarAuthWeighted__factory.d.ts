import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IAxelarAuthWeighted, IAxelarAuthWeightedInterface } from "../../../../../@axelar-network/axelar-cgp-solidity/contracts/interfaces/IAxelarAuthWeighted";
export declare class IAxelarAuthWeighted__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "DuplicateOperators";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOperators";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidWeights";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LowSignaturesWeight";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MalformedSigners";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotOwner";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "newOperators";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "newWeights";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newThreshold";
            readonly type: "uint256";
        }];
        readonly name: "OperatorshipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentEpoch";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "epochForHash";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "epoch";
            readonly type: "uint256";
        }];
        readonly name: "hashForEpoch";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "params";
            readonly type: "bytes";
        }];
        readonly name: "transferOperatorship";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "proof";
            readonly type: "bytes";
        }];
        readonly name: "validateProof";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "currentOperators";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IAxelarAuthWeightedInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IAxelarAuthWeighted;
}
//# sourceMappingURL=IAxelarAuthWeighted__factory.d.ts.map