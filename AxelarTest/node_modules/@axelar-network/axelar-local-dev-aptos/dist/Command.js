'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command = void 0;
const ethers_1 = require("ethers");
const { defaultAbiCoder } = ethers_1.ethers.utils;
const aptos_1 = require("aptos");
const aptosNetworkUtils_1 = require("./aptosNetworkUtils");
//An internal class for handling axelar commands.
class Command {
    constructor(commandId, name, data, dataSignature, post = undefined, chain = null) {
        this.commandId = commandId;
        this.name = name;
        this.data = data;
        this.encodedData = chain === 'aptos' && name === 'approve_contract_call' ? '' : defaultAbiCoder.encode(dataSignature, data);
        this.post = post;
    }
}
exports.Command = Command;
_a = Command;
Command.createAptosContractCallCommand = (commandId, relayData, args) => {
    return new Command(commandId, 'approve_contract_call', [args.from, args.sourceAddress, args.destinationContractAddress, args.payloadHash, args.payload], [], () => __awaiter(void 0, void 0, void 0, function* () {
        const tx = yield aptosNetworkUtils_1.aptosNetwork.execute(new aptos_1.HexString(commandId).toUint8Array(), args.destinationContractAddress, new aptos_1.HexString(args.payload).toUint8Array());
        relayData.callContract[commandId].execution = tx.hash;
        return tx;
    }), 'aptos');
};
//# sourceMappingURL=Command.js.map