"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadAptosNetwork = exports.createAptosNetwork = exports.aptosNetwork = void 0;
const aptos_1 = require("aptos");
const AptosNetwork_1 = require("./AptosNetwork");
function createAptosNetwork(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const nodeUrl = (config === null || config === void 0 ? void 0 : config.nodeUrl) || 'http://localhost:8080';
        const faucetUrl = (config === null || config === void 0 ? void 0 : config.faucetUrl) || 'http://localhost:8081';
        const loadingAptosNetwork = new AptosNetwork_1.AptosNetwork(nodeUrl);
        // fund the account with faucet
        const faucet = new aptos_1.FaucetClient(nodeUrl, faucetUrl);
        // fund the deployer address
        yield faucet.fundAccount(loadingAptosNetwork.owner.address(), 1e10);
        // Check if whether the gateway is deployed
        const isGatewayDeployed = yield loadingAptosNetwork.isGatewayDeployed();
        // Deploy axelar framework modules, skip if already deployed
        if (!isGatewayDeployed) {
            const tx = yield loadingAptosNetwork.deployAxelarFrameworkModules().catch((e) => {
                console.error(e);
            });
            console.log('Deployed Axelar Framework modules:', tx.hash);
        }
        // update the sequence number
        const callContractEvents = yield loadingAptosNetwork.queryContractCallEvents({ limit: 1000 });
        loadingAptosNetwork.updateContractCallSequence(callContractEvents);
        const payGasEvents = yield loadingAptosNetwork.queryPayGasContractCallEvents({ limit: 1000 });
        loadingAptosNetwork.updatePayGasContractCallSequence(payGasEvents);
        exports.aptosNetwork = loadingAptosNetwork;
        return exports.aptosNetwork;
    });
}
exports.createAptosNetwork = createAptosNetwork;
function loadAptosNetwork(nodeUrl = 'http://localhost:8080') {
    return __awaiter(this, void 0, void 0, function* () {
        exports.aptosNetwork = new AptosNetwork_1.AptosNetwork(nodeUrl);
    });
}
exports.loadAptosNetwork = loadAptosNetwork;
//# sourceMappingURL=aptosNetworkUtils.js.map