"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AptosRelayer = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const aptosNetworkUtils_1 = require("./aptosNetworkUtils");
const utils_2 = require("./utils");
const aptos_1 = require("aptos");
const axelar_local_dev_1 = require("@axelar-network/axelar-local-dev");
const Command_1 = require("./Command");
const AddressZero = ethers_1.ethers.constants.AddressZero;
class AptosRelayer extends axelar_local_dev_1.Relayer {
    constructor() {
        super();
    }
    setRelayer(type, _) {
        if (type === 'near') {
            console.log('near not supported yet');
        }
    }
    updateEvents() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.updateGasEvents();
            yield this.updateCallContractEvents();
        });
    }
    execute(commands) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.executeAptosToEvm(commands);
            yield this.executeEvmToAptos(commands);
        });
    }
    executeAptosToEvm(commandList) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const to of axelar_local_dev_1.networks) {
                const commands = commandList[to.name];
                if (commands.length == 0)
                    continue;
                const execution = yield this.executeEvmGateway(to, commands);
                yield this.executeEvmExecutable(to, commands, execution);
            }
        });
    }
    executeEvmToAptos(commands) {
        return __awaiter(this, void 0, void 0, function* () {
            const toExecute = commands['aptos'];
            if ((toExecute === null || toExecute === void 0 ? void 0 : toExecute.length) === 0)
                return;
            yield this.executeAptosGateway(toExecute);
            yield this.executeAptosExecutable(toExecute);
        });
    }
    executeAptosGateway(commands) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!aptosNetworkUtils_1.aptosNetwork)
                return;
            for (const command of commands) {
                const commandId = new aptos_1.HexString(command.commandId).toUint8Array();
                const payloadHash = new aptos_1.HexString(command.data[3]).toUint8Array();
                yield aptosNetworkUtils_1.aptosNetwork.approveContractCall(commandId, command.data[0], command.data[1], command.data[2], payloadHash);
            }
        });
    }
    executeAptosExecutable(commands) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!aptosNetworkUtils_1.aptosNetwork)
                return;
            for (const command of commands) {
                if (!command.post)
                    continue;
                yield command.post({});
            }
        });
    }
    executeEvmGateway(to, commands) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = (0, utils_1.arrayify)(utils_1.defaultAbiCoder.encode(['uint256', 'bytes32[]', 'string[]', 'bytes[]'], [to.chainId, commands.map((com) => com.commandId), commands.map((com) => com.name), commands.map((com) => com.encodedData)]));
            const signedData = yield (0, axelar_local_dev_1.getSignedExecuteInput)(data, to.operatorWallet);
            return to.gateway
                .connect(to.ownerWallet)
                .execute(signedData, { gasLimit: BigInt(8e6) })
                .then((tx) => tx.wait());
        });
    }
    executeEvmExecutable(to, commands, execution) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const command of commands) {
                if (command.post == null)
                    continue;
                if (!execution.events.find((event) => {
                    return event.event === 'Executed' && event.args[0] == command.commandId;
                }))
                    continue;
                const payed = command.name == 'approveContractCall'
                    ? this.contractCallGasEvents.find((log) => {
                        if (log.sourceAddress.toLowerCase() != command.data[1].toLowerCase())
                            return false;
                        if (log.destinationChain.toLowerCase() != to.name.toLowerCase())
                            return false;
                        if (log.destinationAddress.toLowerCase() != command.data[2].toLowerCase())
                            return false;
                        if (log.payloadHash.toLowerCase() != command.data[3].toLowerCase())
                            return false;
                        return true;
                    })
                    : false;
                if (!payed)
                    continue;
                if (command.name == 'approveContractCall') {
                    const index = this.contractCallGasEvents.indexOf(payed);
                    this.contractCallGasEvents = this.contractCallGasEvents.filter((_, i) => i !== index);
                }
                else {
                    const index = this.contractCallWithTokenGasEvents.indexOf(payed);
                    this.contractCallWithTokenGasEvents = this.contractCallWithTokenGasEvents.filter((_, i) => i !== index);
                }
                try {
                    const cost = (0, axelar_local_dev_1.getGasPrice)();
                    const blockLimit = Number((yield to.provider.getBlock('latest')).gasLimit);
                    yield command.post({
                        gasLimit: BigInt(Math.min(blockLimit, payed.gasFeeAmount / cost)),
                    });
                }
                catch (e) {
                    axelar_local_dev_1.logger.log(e);
                }
            }
        });
    }
    updateGasEvents() {
        return __awaiter(this, void 0, void 0, function* () {
            const events = yield aptosNetworkUtils_1.aptosNetwork.queryPayGasContractCallEvents();
            aptosNetworkUtils_1.aptosNetwork.updatePayGasContractCallSequence(events);
            for (const event of events) {
                const args = {
                    sourceAddress: event.data.source_address,
                    destinationAddress: event.data.destination_address,
                    gasFeeAmount: event.data.gas_fee_amount,
                    destinationChain: event.data.destination_chain,
                    payloadHash: event.data.payload_hash,
                    refundAddress: event.data.refund_address,
                    gasToken: AddressZero,
                };
                this.contractCallGasEvents.push(args);
            }
        });
    }
    updateCallContractEvents() {
        return __awaiter(this, void 0, void 0, function* () {
            const events = yield aptosNetworkUtils_1.aptosNetwork.queryContractCallEvents();
            aptosNetworkUtils_1.aptosNetwork.updateContractCallSequence(events);
            for (const event of events) {
                const commandId = (0, utils_2.getAptosLogID)('aptos', event);
                const contractCallArgs = {
                    from: 'aptos',
                    to: event.data.destinationChain,
                    sourceAddress: event.data.sourceAddress,
                    destinationContractAddress: event.data.destinationAddress,
                    payload: event.data.payload,
                    payloadHash: event.data.payloadHash,
                    transactionHash: '',
                    sourceEventIndex: 0,
                };
                this.relayData.callContract[commandId] = contractCallArgs;
                const command = axelar_local_dev_1.Command.createEVMContractCallCommand(commandId, this.relayData, contractCallArgs);
                this.commands[contractCallArgs.to].push(command);
            }
        });
    }
    createCallContractCommand(commandId, relayData, contractCallArgs) {
        return Command_1.Command.createAptosContractCallCommand(commandId, relayData, contractCallArgs);
    }
    createCallContractWithTokenCommand() {
        throw new Error('Method not implemented.');
    }
}
exports.AptosRelayer = AptosRelayer;
//# sourceMappingURL=AptosRelayer.js.map