import { AptosAccount, AptosClient, HexString, MaybeHexString } from 'aptos';
declare type EntryFunctionPayload = {
    function: string;
    /**
     * Type arguments of the function
     */
    type_arguments: Array<string>;
    /**
     * Arguments of the function
     */
    arguments: Array<any>;
};
interface QueryOptions {
    start?: number;
    limit?: number;
}
export declare class AptosNetwork extends AptosClient {
    owner: AptosAccount;
    contractCallSequence: number;
    payContractCallSequence: number;
    resourceAddress: MaybeHexString;
    constructor(nodeUrl: string);
    isGatewayDeployed(): Promise<boolean>;
    deploy(modulePath: string, compiledModules: string[], seed?: MaybeHexString | undefined): Promise<any>;
    getOwnerBalance(): Promise<bigint>;
    deployAxelarFrameworkModules(): Promise<any>;
    updateContractCallSequence(events: any[]): void;
    updatePayGasContractCallSequence(events: any[]): void;
    queryContractCallEvents(options?: QueryOptions): Promise<{
        guid: {
            creation_number: string;
            account_address: string;
        };
        sequence_number: string;
        type: string;
        data: any;
    }[]>;
    queryPayGasContractCallEvents(options?: QueryOptions): Promise<{
        guid: {
            creation_number: string;
            account_address: string;
        };
        sequence_number: string;
        type: string;
        data: any;
    }[]>;
    approveContractCall(commandId: Uint8Array, sourceChain: string, sourceAddress: string, destinationAddress: string, payloadHash: Uint8Array): Promise<{
        hash: any;
        success: any;
        vmStatus: any;
    }>;
    execute(commandId: Uint8Array, destinationAddress: string, payload: Uint8Array): Promise<{
        hash: any;
        success: any;
        vmStatus: any;
    }>;
    submitTransactionAndWait(from: MaybeHexString, txData: EntryFunctionPayload): Promise<any>;
    private getLatestEventSequence;
    static getResourceAccountAddress(sourceAddress: MaybeHexString, seed: MaybeHexString): HexString;
}
export {};
//# sourceMappingURL=AptosNetwork.d.ts.map